// Code generated by go-bindata.
// sources:
// shim/index.js
// shim/shim.go
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shimIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x8f\xd4\x30\x10\x85\xfb\xfd\x15\xd3\xc5\x16\x27\x73\x0d\xd5\x2a\xb4\x48\x14\x47\x81\xa8\x91\xb1\x67\x6f\x2d\x65\xed\xec\xcc\x44\x77\x51\x94\xff\x8e\x6c\x27\x77\x26\x02\x89\x6a\xf7\xf9\xbd\xf9\xfc\x3c\x71\x29\xb2\xc0\x02\x3c\xda\x97\x08\x2b\xf4\x40\x78\x9f\x02\xa1\xea\xdc\x35\x0c\xfe\xe7\x48\xc9\x21\x73\xa7\xcf\xa7\x9a\xbd\x70\x1b\xba\x14\xe7\x84\xaf\x63\x22\x61\xb3\x2c\xe6\xc9\xde\x70\xcd\xa0\xcb\x14\x9d\x84\x14\x41\x11\xde\x1f\x80\x90\x35\x2c\x27\x00\x80\x0a\xba\xd9\x10\xa1\xaf\x37\xab\xce\x7c\xcc\xba\xc0\x72\x84\xf0\xfe\x25\x41\x0f\xcb\x7a\x7e\xd7\xe6\x97\x65\xfc\x41\x43\x2d\xb0\xab\x3f\x02\xc9\xcf\xbb\x9b\xfc\xdc\x5a\xd7\xc4\x12\xed\x0d\x37\x7b\x97\x6d\x24\x8c\x9b\x19\xc6\xf6\xf8\x86\x72\x4d\x7e\xb3\xaa\x68\xed\x44\xe1\x39\x44\x3b\xbc\x17\x6b\x4e\xda\xe0\x7d\x42\xda\xdb\x95\xff\xdb\x5b\xf3\xc3\x0d\x8b\x0f\xd1\xbc\x50\x10\x54\x5f\xbf\x7f\x7b\x32\x2c\x14\xe2\x73\xb8\xcc\xaa\x4c\x6b\x7d\x3e\x86\x31\x7a\xb5\xef\x6b\x40\xc9\x1b\x9e\x06\x81\x1e\xba\xee\x40\x4e\x93\x98\x14\x55\xe7\xad\xd8\xee\x01\x54\xfe\xd5\xd0\x7f\xde\xbe\x47\xad\x58\x86\x3f\xf4\x90\xcd\x7a\xd7\xaa\x0f\x1c\x24\xfa\x0f\x8e\x61\xb1\x32\xb1\xfa\xf4\xf8\xa8\x0d\xe7\x96\x25\xf7\x17\x64\x66\xb9\x21\x31\x66\x98\x4b\x1e\x0f\x30\xa1\xb9\x51\x6f\xf8\x8c\x2c\x3b\x1a\x2d\x31\xaa\x5a\x7d\x5f\x50\xb9\x05\x9c\x15\x77\x55\xf8\xaa\xff\x35\xbf\x0d\x35\x33\x6f\xfd\xd6\xf3\xe9\x77\x00\x00\x00\xff\xff\xe4\xd4\x51\x8c\x17\x03\x00\x00")

func shimIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_shimIndexJs,
		"shim/index.js",
	)
}

func shimIndexJs() (*asset, error) {
	bytes, err := shimIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim/index.js", size: 791, mode: os.FileMode(420), modTime: time.Unix(1506081548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shimShimGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func shimShimGoBytes() ([]byte, error) {
	return bindataRead(
		_shimShimGo,
		"shim/shim.go",
	)
}

func shimShimGo() (*asset, error) {
	bytes, err := shimShimGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim/shim.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1506081558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shim/index.js": shimIndexJs,
	"shim/shim.go": shimShimGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shim": &bintree{nil, map[string]*bintree{
		"index.js": &bintree{shimIndexJs, map[string]*bintree{}},
		"shim.go": &bintree{shimShimGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

