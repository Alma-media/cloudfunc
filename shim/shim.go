// Code generated by go-bindata.
// sources:
// shim/index.js
// shim/shim.go
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shimIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6a\xf3\x30\x10\x85\xf7\x3e\xc5\xec\x24\xf1\x07\xfd\xd9\x74\x15\xdc\x03\x74\x91\x2e\x7a\x80\xa2\x4a\xe3\x46\xe0\x48\x8e\x66\x4c\x12\x8c\xef\x5e\xc6\x76\x82\x49\x5b\xa8\x37\x96\x34\xef\x7d\xef\x31\x3e\x27\x62\x18\x80\x3a\x77\x4e\x30\x42\x0d\x05\x4f\x7d\x2c\xa8\x95\x3f\xc4\x36\xbc\x77\x25\x7b\x24\x52\x66\x57\xcd\xda\x86\xd6\xa2\x66\x9a\x54\x78\xe9\x72\x61\xb2\xc3\x60\xf7\xee\x88\xa3\x80\x9a\x3e\x79\x8e\x39\x81\x2e\x78\xda\x40\x41\x32\x30\x54\x00\x00\x33\xe8\xe8\x62\x82\x7a\x4e\xd6\xca\xfe\x97\xbb\xc0\x44\x21\x67\x4b\x1c\x62\xb2\xe7\x12\x19\xf5\xcb\xdb\xeb\xde\x12\x97\x98\x3e\x63\x73\x15\xa2\xfd\xc8\xe1\x6a\xbe\xeb\x31\x05\x2d\x95\xe4\xb9\x45\x96\xdc\xbe\x65\xa8\x41\xa9\xe5\xf5\x26\xce\x3d\xdb\x9c\xb4\x0a\x8e\x9d\xda\x80\x96\xbf\x81\xfa\x79\x69\x29\xdf\x62\xfe\x57\x83\x0c\xe7\xac\xd1\x3c\x70\xb0\x94\x3f\x70\x2c\xb1\xe3\x9e\xf4\xd3\x76\x6b\x2c\x49\xcb\x49\xf7\x03\x52\x58\xbe\xcd\x84\x02\xf3\x39\xe0\x03\x8c\xcb\x75\x75\xbb\xe3\x05\x39\xad\xa9\x73\x85\x50\xcf\xd5\x6f\x0b\x9a\x52\xc0\x3b\xf6\x07\x8d\x17\xf3\x9b\x7f\x31\xad\x3c\xf7\x7e\xe3\xae\xfa\x0a\x00\x00\xff\xff\xe7\x14\x01\xb7\x2d\x02\x00\x00")

func shimIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_shimIndexJs,
		"shim/index.js",
	)
}

func shimIndexJs() (*asset, error) {
	bytes, err := shimIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim/index.js", size: 557, mode: os.FileMode(420), modTime: time.Unix(1499771686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shimShimGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func shimShimGoBytes() ([]byte, error) {
	return bindataRead(
		_shimShimGo,
		"shim/shim.go",
	)
}

func shimShimGo() (*asset, error) {
	bytes, err := shimShimGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim/shim.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1499771693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shim/index.js": shimIndexJs,
	"shim/shim.go": shimShimGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shim": &bintree{nil, map[string]*bintree{
		"index.js": &bintree{shimIndexJs, map[string]*bintree{}},
		"shim.go": &bintree{shimShimGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

